name: CI/CD pipeline

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: Production

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 'v20.18.0'

      - name: Install dependencies
        run: |
          cd frontend
          npm install
          cd ../backend
          npm install

      - name: Install pm2
        run: |
          npm install pm2 -g

      - name: Start Node.js Server (Backend) on port 8081
        run: |
          cd backend
          nohup npm run start:prod &  # sau folosește comanda personalizată pentru a porni backend-ul

      - name: Start React App (Frontend) on port 5173
        run: |
          cd frontend
          nohup npm run dev &

      - name: Install ngrok
        run: |
          npm install -g ngrok
          ngrok config add-authtoken YOUR_NGROK_AUTH_TOKEN

      - name: Start ngrok Tunnel for Frontend (Port 5173)
        run: |
          ngrok http 5173 --name frontend &

      - name: Start ngrok Tunnel for Backend (Port 8081)
        run: |
          ngrok http 8081 --name backend &

      - name: Wait for apps to start
        run: |
          sleep 10

      - name: Check if React app is running
        run: |
          curl --fail http://localhost:5173 || exit 1

      - name: Display URL for React App
        run: |
          ngrok_url_frontend=$(curl -s http://localhost:4040/api/tunnels | jq -r .tunnels[0].public_url)
          echo "Access React app at ngrok URL: $ngrok_url_frontend"

      - name: Display URL for Backend
        run: |
          ngrok_url_backend=$(curl -s http://localhost:4040/api/tunnels | jq -r .tunnels[1].public_url)
          echo "Access Backend at ngrok URL: $ngrok_url_backend"

      - name: Keep apps running for 600 seconds
        run: |
          sleep 600
